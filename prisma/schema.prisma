// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Subscription fields
  stripeCustomerId       String?   @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  
  accounts      Account[]
  sessions      Session[]
  chatSessions  ChatSession[]
  
  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatSession {
  id           String   @id @default(cuid())
  userId       String
  personName   String
  selectedPerson String
  messageCount Int
  collectionName String
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())
  isActive     Boolean  @default(true)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations Conversation[]
  
  @@map(name: "chat_sessions")
}

model Conversation {
  id            String   @id @default(cuid())
  chatSessionId String
  userMessage   String   @db.Text
  aiResponse    String   @db.Text
  contextUsed   Boolean  @default(false)
  relevantMessages Int    @default(0)
  processingTime String?
  createdAt     DateTime @default(now())
  
  chatSession ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)
  
  @@map(name: "conversations")
}