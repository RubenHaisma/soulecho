generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                     String            @id @default(cuid())
  name                   String?
  email                  String            @unique
  emailVerified          DateTime?
  image                  String?
  password               String?
  createdAt              DateTime          @default(now())
  updatedAt              DateTime          @updatedAt
  stripeCustomerId       String?           @unique
  stripeSubscriptionId   String?           @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  isTrialActive          Boolean           @default(true)
  trialChatsUsed         Int               @default(0)
  trialEndDate           DateTime?
  trialStartDate         DateTime?         @default(now())
  lastTokenReset         DateTime          @default(now())
  responseQualityLevel   Int               @default(100)
  tokensUsedToday        Int               @default(0)
  totalTokensUsed        Int               @default(0)
  subscriptionStatus     String            @default("free")
  accounts               Account[]
  sessions               Session[]
  chatSessions           ChatSession[]
  memoryCards            MemoryCard[]
  milestones             MemoryMilestone[]
  notifications          NotificationLog[]
  preferences            UserPreferences?
  emailCampaignLogs      EmailCampaignLog[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model ChatSession {
  id             String            @id @default(cuid())
  userId         String
  personName     String
  selectedPerson String
  messageCount   Int
  collectionName String
  detectedLanguages String[]       @default([])
  createdAt      DateTime          @default(now())
  lastActivity   DateTime          @default(now())
  isActive       Boolean           @default(true)
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  conversations  Conversation[]
  milestones     MemoryMilestone[]

  @@map("chat_sessions")
}

model Conversation {
  id               String      @id @default(cuid())
  chatSessionId    String
  userMessage      String
  aiResponse       String
  contextUsed      Boolean     @default(false)
  relevantMessages Int         @default(0)
  processingTime   String?
  createdAt        DateTime    @default(now())
  chatSession      ChatSession @relation(fields: [chatSessionId], references: [id], onDelete: Cascade)

  @@map("conversations")
}

model UserPreferences {
  id                      String    @id @default(cuid())
  userId                  String    @unique
  birthday                DateTime?
  timezone                String    @default("UTC")
  notificationEmail       String?
  notificationPreferences Json?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model MemoryMilestone {
  id                String        @id @default(cuid())
  userId            String
  chatSessionId     String?
  title             String
  description       String?
  date              DateTime
  type              MilestoneType
  isRecurring       Boolean       @default(false)
  recurrencePattern String?
  imageUrl          String?
  tags              String[]
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  memoryCards       MemoryCard[]
  chatSession       ChatSession?  @relation(fields: [chatSessionId], references: [id])
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("memory_milestones")
}

model MemoryCard {
  id          String           @id @default(cuid())
  userId      String
  milestoneId String?
  title       String
  content     String
  imageUrl    String?
  cardType    CardType
  isGenerated Boolean          @default(false)
  createdAt   DateTime         @default(now())
  expiresAt   DateTime?
  milestone   MemoryMilestone? @relation(fields: [milestoneId], references: [id])
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("memory_cards")
}

model NotificationLog {
  id           String           @id @default(cuid())
  userId       String
  type         NotificationType
  title        String
  message      String
  isRead       Boolean          @default(false)
  sentAt       DateTime         @default(now())
  scheduledFor DateTime?
  metadata     Json?
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_logs")
}

model EmailCampaign {
  id            String               @id @default(cuid())
  name          String
  description   String?
  emailTemplate String               // JSON template data
  subject       String
  status        CampaignStatus       @default(DRAFT)
  targetType    CampaignTargetType   @default(ALL_USERS)
  targetCriteria Json?               // JSON criteria for targeting
  scheduledFor  DateTime?
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  createdBy     String               // admin user id
  totalTargets  Int                  @default(0)
  totalSent     Int                  @default(0)
  totalFailed   Int                  @default(0)
  totalOpened   Int                  @default(0)
  totalClicked  Int                  @default(0)
  logs          EmailCampaignLog[]
  sequences     EmailSequence[]

  @@map("email_campaigns")
}

model EmailCampaignLog {
  id                String           @id @default(cuid())
  campaignId        String
  userId            String
  email             String
  status            EmailLogStatus   @default(PENDING)
  sentAt            DateTime?
  deliveredAt       DateTime?
  openedAt          DateTime?
  clickedAt         DateTime?
  errorMessage      String?
  resendId          String?          // Resend email ID
  metadata          Json?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  campaign          EmailCampaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  user              User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([campaignId, userId])
  @@map("email_campaign_logs")
}

model EmailSequence {
  id            String           @id @default(cuid())
  campaignId    String
  name          String
  description   String?
  order         Int              @default(0)
  delayDays     Int              @default(0) // Days after previous email
  delayHours    Int              @default(0) // Hours after previous email
  emailTemplate String           // JSON template data
  subject       String
  isActive      Boolean          @default(true)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  campaign      EmailCampaign    @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  logs          EmailSequenceLog[]

  @@map("email_sequences")
}

model EmailSequenceLog {
  id         String        @id @default(cuid())
  sequenceId String
  userId     String
  email      String
  status     EmailLogStatus @default(PENDING)
  scheduledFor DateTime
  sentAt     DateTime?
  deliveredAt DateTime?
  openedAt   DateTime?
  clickedAt  DateTime?
  errorMessage String?
  resendId   String?
  metadata   Json?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  sequence   EmailSequence @relation(fields: [sequenceId], references: [id], onDelete: Cascade)

  @@unique([sequenceId, userId])
  @@map("email_sequence_logs")
}

model EmailTemplate {
  id          String         @id @default(cuid())
  name        String
  description String?
  type        EmailType
  subject     String
  htmlContent String
  textContent String?
  variables   String[]       @default([]) // Available template variables
  isActive    Boolean        @default(true)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("email_templates")
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
}

enum CampaignTargetType {
  ALL_USERS
  VERIFIED_USERS
  TRIAL_USERS
  PREMIUM_USERS
  INACTIVE_USERS
  CUSTOM_CRITERIA
}

enum EmailLogStatus {
  PENDING
  SENT
  DELIVERED
  OPENED
  CLICKED
  BOUNCED
  FAILED
  UNSUBSCRIBED
}

enum EmailType {
  WELCOME
  FOLLOW_UP
  TRIAL_REMINDER
  UPGRADE_PROMPT
  FEATURE_ANNOUNCEMENT
  NEWSLETTER
  REACTIVATION
  CUSTOM
}

enum MilestoneType {
  BIRTHDAY
  ANNIVERSARY
  SPECIAL_DAY
  CONVERSATION_MOMENT
  MEMORY_TRIGGER
  CUSTOM
}

enum CardType {
  BIRTHDAY
  ANNIVERSARY
  MEMORY_REFLECTION
  CONVERSATION_HIGHLIGHT
  AI_GENERATED
  CUSTOM
}

enum NotificationType {
  BIRTHDAY_REMINDER
  MILESTONE_REMINDER
  MEMORY_CARD
  CONVERSATION_SUGGESTION
  SYSTEM
}
